#!/usr/bin/python
import os, re, glob, sys

if len(sys.argv) < 5:
    print 'Merge partitioned matrix data Li.txt generated by the Petuum NMF application'
    print ''
    print 'Usage: python %s <data-dirname> <data-format> <rank> <n> [<output-dirname>]' % sys.argv[0]
    print ''
    print 'Output: 1 merged file in directory specified in <output-dirname>.'
    print ''
    print 'Params:'
    print ('<data-dirname>: The directory containing L matrices generated by NMF application, '
          'in which the name of L matrices must be of the form L*.client_id')
    print '<data-format>: Format of the matrix data. Can be "binary" or "text".'
    print '<rank>: Number of columns in L matrix. It shall be the rank specified in NMF.'
    print '<n>: Number of rows in unpartitioned matrix. It shall be the size of unpartitioned data.'
    print '<output-dirname>: Optional. The directory to put the output files. Default value is the working directory.'
    print ''
    sys.exit(1)

data_dirname = sys.argv[1]
data_format = sys.argv[2]
m = int(sys.argv[3])
n = int(sys.argv[4])

if len(sys.argv) < 6:
    output_dirname = os.getcwd()
else:
    output_dirname = os.path.realpath(sys.argv[5])

if not os.path.exists(data_dirname):
    print 'Directory', data_dirname, 'does not exist!'
    sys.exit(1)

if not os.path.exists(output_dirname):
    print 'Directory', output_dirname, 'does not exist!'
    sys.exit(1)

fname_list = glob.glob(os.path.join(data_dirname, '*'))
flist = {}
for file in fname_list:
    fname_base = os.path.basename(file)
    m_re = re.match(r'(?P<base_name>L.*?)\.(?P<client_id>[0-9]+)', fname_base)
    if m_re:
        flist[int(m_re.group('client_id'))] = {}
        flist[int(m_re.group('client_id'))]['file_name'] = file
        base_name = m_re.group('base_name')

if len(flist) == 0:
    print ('No file matching L*.client_id found, make sure the names of files '
          'to be merged is in the form of L*.client_id!')
    sys.exit(1)
file_basename = os.path.join(data_dirname, base_name)
output_file = os.path.join(output_dirname, base_name)
if data_format == 'binary':
    with open(output_file, 'wb') as f:
        clients = flist.keys()
        client_id_max = max(clients)
        num_clients = client_id_max + 1
        for client_id in range(0, num_clients):
            if client_id not in flist:
                print 'A complete list of files Li.txt shall exist!', 
                (file_basename + '.' + str(client_id)), 'does not exist!'
                sys.exit(1)
            flist[client_id]['file'] = open(flist[client_id]['file_name'], 'rb')
        for j in range(0, n):
            client_id = j % num_clients
            for i in range(0, m):
                f.write(flist[client_id]['file'].read(4))
elif data_format == 'text':
    with open(output_file, 'w') as f:
        clients = flist.keys()
        client_id_max = max(clients)
        num_clients = client_id_max + 1
        for client_id in range(0, num_clients):
            if client_id not in flist:
                print 'A complete list of files Li.txt shall exist!', 
                (file_basename + '.' + str(client_id)), 'does not exist!'
                sys.exit(1)
            flist[client_id]['file'] = open(flist[client_id]['file_name'], 'r')
            flist[client_id]['line_buffer'] = flist[client_id]['file'].readline().split()
            flist[client_id]['line_pointer'] = 0
        for j in range(0, n):
            client_id = j % num_clients
            for i in range(0, m):
                if not flist[client_id]['line_pointer'] < len(flist[client_id]['line_buffer']):
                    flist[client_id]['line_buffer'] = flist[client_id]['file'].readline().split()
                    flist[client_id]['line_pointer'] = 0
                f.write(str(flist[client_id]['line_buffer'][flist[client_id]['line_pointer']]) + '\t')
                flist[client_id]['line_pointer'] = flist[client_id]['line_pointer'] + 1
            f.write('\n')
else:
    print 'Unrecognized data format:', data_format